<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="testConString1" elementType="Argument">
            <stringProp name="Argument.name">testConString1</stringProp>
            <stringProp name="Argument.value">jdbc:mysql://localhost:3306/testdb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testUserName1" elementType="Argument">
            <stringProp name="Argument.name">testUserName1</stringProp>
            <stringProp name="Argument.value">root</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testPassword1" elementType="Argument">
            <stringProp name="Argument.name">testPassword1</stringProp>
            <stringProp name="Argument.value">root</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testConString2" elementType="Argument">
            <stringProp name="Argument.name">testConString2</stringProp>
            <stringProp name="Argument.value">jdbc:mysql://localhost:3306/testdb2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testUserName2" elementType="Argument">
            <stringProp name="Argument.name">testUserName2</stringProp>
            <stringProp name="Argument.value">root</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testPassword2" elementType="Argument">
            <stringProp name="Argument.name">testPassword2</stringProp>
            <stringProp name="Argument.value">root</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="acptConString" elementType="Argument">
            <stringProp name="Argument.name">acptConString</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="acptUserName" elementType="Argument">
            <stringProp name="Argument.name">acptUserName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="acptPassword" elementType="Argument">
            <stringProp name="Argument.name">acptPassword</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="uatConString" elementType="Argument">
            <stringProp name="Argument.name">uatConString</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="uatUserName" elementType="Argument">
            <stringProp name="Argument.name">uatUserName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="uatPassword" elementType="Argument">
            <stringProp name="Argument.name">uatPassword</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prodConString" elementType="Argument">
            <stringProp name="Argument.name">prodConString</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prodUserName" elementType="Argument">
            <stringProp name="Argument.name">prodUserName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prodPassword" elementType="Argument">
            <stringProp name="Argument.name">prodPassword</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Env" elementType="Argument">
            <stringProp name="Argument.name">Env</stringProp>
            <stringProp name="Argument.value">${__property(Environment,,Test)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">
	if(vars.get(&quot;Env&quot;).equalsIgnoreCase(&quot;Production&quot;))
	{
      vars.put(&quot;DBConnectionString&quot;,(vars.get(&quot;prodConString&quot;)));
      vars.put(&quot;userName&quot;,(vars.get(&quot;prodUserName&quot;)));
      vars.put(&quot;password&quot;,(vars.get(&quot;prodPassword&quot;)));  
	}

	else if (vars.get(&quot;Env&quot;).equalsIgnoreCase(&quot;UAT&quot;))   
	{   
   
	props.setProperty(&quot;DBConnectionString&quot;,vars.get(&quot;uatConString&quot;));
	props.setProperty(&quot;userName&quot;,vars.get(&quot;uatUserName&quot;));
	props.setProperty(&quot;password&quot;,vars.get(&quot;uatPassword&quot;));
      
	}
    
	else if (vars.get(&quot;Env&quot;).equalsIgnoreCase(&quot;Acceptance&quot;))
	{
     
    	props.setProperty(&quot;DBConnectionString&quot;,vars.get(&quot;acptConString&quot;));
    	props.setProperty(&quot;userName&quot;,vars.get(&quot;acptUserName&quot;));
	props.setProperty(&quot;password&quot;,vars.get(&quot;acptPassword&quot;));
	}
      
	else if (vars.get(&quot;Env&quot;).equalsIgnoreCase(&quot;Test&quot;))  
	{
	
	props.setProperty(&quot;DB1ConnectionString&quot;,vars.get(&quot;testConString1&quot;));
	props.setProperty(&quot;userName1&quot;,vars.get(&quot;testUserName1&quot;));
	props.setProperty(&quot;password1&quot;,vars.get(&quot;testPassword1&quot;)); 
	
	props.setProperty(&quot;DB2ConnectionString&quot;,vars.get(&quot;testConString2&quot;));
	props.setProperty(&quot;userName2&quot;,vars.get(&quot;testUserName2&quot;));
	props.setProperty(&quot;password2&quot;,vars.get(&quot;testPassword2&quot;)); 
	} </stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MS SQL Connection Configuration_testdb" enabled="true">
        <stringProp name="dataSource">MS_Driver_Connection_1</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">${__P(DB1ConnectionString)}</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">${__P(userName1)}</stringProp>
        <stringProp name="password">root</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MS SQL Connection Configuration_testdb2" enabled="true">
        <stringProp name="dataSource">MS_Driver_Connection_2</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">${__P(DB2ConnectionString)}</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">${__P(userName2)}</stringProp>
        <stringProp name="password">root</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="testdb JDBC Request_01" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select * from students;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id1,name1,grade1</stringProp>
          <stringProp name="resultVariable">resultSet1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(idT1, ${id1_#})};
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="testdab2 JDBC Request_02" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_2</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select * from students2;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id2,name2,grade2</stringProp>
          <stringProp name="resultVariable">resultSet2</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(idT2, ${id2_#})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">//dummy sampler</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int students1RowCount = ${__property(idT1)};
log.info(&quot;testdb1_studnets1 Row Count = &quot; + students1RowCount);

int students2RowCount= ${__property(idT2)};
log.info(&quot;testdb2_studnets2 Row Count = &quot; + students2RowCount);

Boolean Failure = false;

if (students1RowCount==students2RowCount){
	
	for (int i=1; i&lt;=students1RowCount ; i++) 
		{	
			if  ( (vars.get(&quot;id1_&quot; + i)) .equals (vars.get(&quot;id2_&quot; + i)) )
				{
				log.info(&quot; Pass : testd1 id1_&quot; + i + &quot;: &quot; + vars.get(&quot;id1_&quot; + i) + &quot; Matches &quot; + &quot;testdb2 id2_ &quot; + i + &quot;: &quot; + vars.get(&quot;id2_&quot; + i) );
					
				}
					
			else if (!(vars.get(&quot;id1_&quot; + i)) .equals (vars.get(&quot;id2_&quot; + i)) )
				{
				Failure = true; 
				FailureMessage = &quot; Failed : testdb1 id1_ &quot; + i + &quot;: &quot; + vars.get(&quot;id1_&quot; + i) + &quot; NOT Matches !! &quot; + &quot;testdb2 id2_&quot; + i + &quot;: &quot; + vars.get(&quot;id2_&quot; + i) ;
				log.info(&quot; Failed :testdb1 id1_ &quot; + i + &quot;: &quot; + vars.get(&quot;id1_&quot; + i) + &quot; NOT Matches !! &quot; + &quot;testdb2 id2_&quot; + i + &quot;: &quot; + vars.get(&quot;id2_&quot; + i));
				}

				if  ( (vars.get(&quot;name1_&quot; + i)) .equals (vars.get(&quot;name2_&quot; + i)) )
				{
				log.info(&quot; Pass : testd1 name1_&quot; + i + &quot;: &quot; + vars.get(&quot;name1_&quot; + i) + &quot; Matches &quot; + &quot;testdb2 name2_ &quot; + i + &quot;: &quot; + vars.get(&quot;name2_&quot; + i) );
					
				}
					
			else if (!(vars.get(&quot;name1_&quot; + i)) .equals (vars.get(&quot;name2_&quot; + i)) )
				{
				Failure = true; 
				FailureMessage = &quot; Failed : testdb1 name1_ &quot; + i + &quot;: &quot; + vars.get(&quot;name1_&quot; + i) + &quot; NOT Matches !! &quot; + &quot;testdb2 name2_&quot; + i + &quot;: &quot; + vars.get(&quot;name2_&quot; + i) ;
				log.info(&quot; Failed :testdb1 name1_ &quot; + i + &quot;: &quot; + vars.get(&quot;name1_&quot; + i) + &quot; NOT Matches !! &quot; + &quot;testdb2 name2_&quot; + i + &quot;: &quot; + vars.get(&quot;name2_&quot; + i));
				}

				if  ( (vars.get(&quot;grade1_&quot; + i)) .equals (vars.get(&quot;grade2_&quot; + i)) )
				{
				log.info(&quot; Pass : testd1 grade1_&quot; + i + &quot;: &quot; + vars.get(&quot;grade1_&quot; + i) + &quot; Matches &quot; + &quot;testdb2 grade2_ &quot; + i + &quot;: &quot; + vars.get(&quot;grade2_&quot; + i) );
					
				}
					
			else if (!(vars.get(&quot;grade1_&quot; + i)) .equals (vars.get(&quot;grade2_&quot; + i)) )
				{
				Failure = true; 
				FailureMessage = &quot; Failed : testdb1 grade1_ &quot; + i + &quot;: &quot; + vars.get(&quot;grade1_&quot; + i) + &quot; NOT Matches !! &quot; + &quot;testdb2 grade2_&quot; + i + &quot;: &quot; + vars.get(&quot;grade2_&quot; + i) ;
				log.info(&quot; Failed :testdb1 grade1_ &quot; + i + &quot;: &quot; + vars.get(&quot;grade1_&quot; + i) + &quot; NOT Matches !! &quot; + &quot;testdb2 grade2_&quot; + i + &quot;: &quot; + vars.get(&quot;grade2_&quot; + i));
				}
	}

}

else {
				Failure = true; 
				FailureMessage = &quot;Test Failed&quot;;
				
				}



</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
